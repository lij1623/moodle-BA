{"version":3,"file":"editor.min.js","sources":["../src/editor.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module      editor_marklar2/editor\n * @package     editor_marklar2\n * @copyright   2016 David Mudrak <david@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n        'jquery',\n        'core/yui',\n        'core/str',\n        'core/log',\n        'core/ajax',\n        'core/event',\n        'editor_marklar2/filepicker',\n        'editor_marklar2/imagepaster',\n], function($, Y, str, log, ajax, event, filepicker, ImagePaster) {\n\n    \"use strict\";\n\n    /**\n     * @constructor\n     * @param {Element} textarea\n     * @param {Object} initparams\n     */\n    function MarklarEditor(textarea, initparams) {\n\n        this.initparams = initparams;\n\n        if (typeof M.editor_marklar2.fpoptions[initparams.elementid] !== \"undefined\") {\n            this.initparams.filepickeroptions = M.editor_marklar2.fpoptions[initparams.elementid];\n        }\n\n        this.initTextArea(textarea);\n        //this.initFormatSelector();\n        this.initPanel();\n        this.initFilesEmbedding();\n        //this.initPreview();\n        this.initSyntaxHelp();\n        this.initImagePaster();\n    }\n\n    /**\n     * Initialize the text area element.\n     *\n     * @param {Element} textarea\n     */\n    MarklarEditor.prototype.initTextArea = function(textarea) {\n        var self = this;\n\n        self.textarea = textarea\n            .addClass('marklar-textarea')\n            .addClass('button')\n            .css('box-sizing', 'border-box')\n            .css('width', '100%')\n            .css('background-color', '#ADD8E6')\n            .css('margin-bottom', '10px')\n            .css('padding', '7px');\n    };\n    \n    \n\n    /**\n     * Initialize the text format selector.\n     */\n    // MarklarEditor.prototype.initFormatSelector = function() {\n    //     var self = this;\n\n    //     // Expected name of the field with the text format.\n    //     var fname = self.textarea.attr('name').replace('[text]', '[format]');\n    //     var form = self.textarea.closest('form');\n\n    //     if (fname === self.textarea.attr('name')) {\n    //         // This may happen in places like mod_data or admin_setting_confightmleditor\n    //         // that keep their own naming rules for the format.\n    //         return;\n    //     }\n\n    //     // Locate the text format selector for our textarea.\n    //     self.formatSelector = form.find('select[name=\"' + fname + '\"]');\n\n    //     if (self.formatSelector.length) {\n    //         // Great, there is the drop down format selector found. We're done here.\n    //         return;\n\n    //     } else {\n    //         // There is no dropdown menu with the format. Try to find the hidden field holding the format value.\n    //         var formatHidden = form.find('input[name=\"' + fname + '\"]');\n    //         var formatId;\n    //         var formatName;\n\n    //         if (formatHidden.length) {\n    //             formatId = parseInt(formatHidden.attr('value'));\n    //         } else {\n    //             // No text format specified.\n    //             log.error('marklar: format field not found: ' + fname);\n    //             return;\n    //         }\n\n    //         switch (formatId) {\n    //             case 0:\n    //                 formatName = 'formattext';\n    //                 break;\n    //             case 1:\n    //                 formatName = 'formathtml';\n    //                 break;\n    //             case 2:\n    //                 formatName = 'formatplain';\n    //                 break;\n    //             case 4:\n    //                 formatName = 'formatmarkdown';\n    //                 break;\n    //             default:\n    //                 log.error('marklar: unknown text format ' + formatId);\n    //                 self.formatSelector = null;\n    //                 return;\n    //         }\n\n    //         // Convert the hidden field into a single item selector.\n    //         self.formatSelector = $('<select class=\"custom-select\" name=\"' + fname + '\"></select>')\n    //             .append($('<option value=\"' + formatId + '\">' + formatName + '</option>'));\n    //         formatHidden.remove();\n\n    //         // Localize the format name.\n    //         str.get_string(formatName, 'core_moodle').done(function(formatTitle) {\n    //             self.formatSelector.find('option[value=\"' + formatId + '\"]').text(formatTitle);\n    //         }).fail(function(ex) {\n    //             log.error(ex);\n    //             return;\n    //         });\n    //     }\n    // };\n\n    /**\n     * Initialize the bottom panel.\n     */\n    MarklarEditor.prototype.initPanel = function() {\n        var self = this;\n\n        // Wrap the textarea.\n        self.textarea.wrap('<div class=\"marklar-wrapper\"></div>');\n\n        // Insert the panel region right after the textarea.\n        self.panel = $('<div class=\"marklar-panel\"></div>').insertAfter(self.textarea);\n\n        // Create a subpanel within the panel with widgets that should be visible in editing mode only.\n        self.editpanel = $('<div class=\"marklar-edit-panel\"></div>').appendTo(self.panel);\n\n        // Move the format selector to the panel.\n        // if (self.formatSelector) {\n        //     self.editpanel.append(self.formatSelector);\n        //     self.formatSelector.attr('data-marklar-widget', 'format-select');\n        // }\n\n        // Create buttons placeholders in the panel so that the order or async initialization does not affect display order.\n        // self.panel.prepend('<span data-marklar-placeholder=\"preview\" />');\n        self.editpanel.append('<span data-marklar-placeholder=\"syntax\" />');\n        self.editpanel.append('<span data-marklar-placeholder=\"insert-image\" />');\n        self.editpanel.append('<span data-marklar-placeholder=\"insert-file\" />');\n    };\n\n    /**\n     * Initialize support for embedding images via file picker.\n     *\n     * @method initFilesEmbedding\n     */\n    MarklarEditor.prototype.initFilesEmbedding = function() {\n\n        if (!(\"filepickeroptions\" in this.initparams)) {\n            log.error(this.initparams.elementid + \": File picker options not found\");\n            return;\n        }\n\n        var self = this;\n\n        Y.use('core_filepicker', function() {\n            self.filepicker = filepicker.init(self.initparams.filepickeroptions);\n            if (self.filepicker.canShowFilepicker(\"image\")) {\n                str.get_string(\"insertimage\", \"editor_marklar2\").done(function(strinsertimage) {\n                    var button = $('<button class=\"btn btn-default\" data-marklar-widget=\"insert-image\" />');\n                    button.text(strinsertimage);\n                    button.click(function(e) {\n                        e.preventDefault();\n                        self.filepicker.showFilepicker(\"image\", function(data) {\n                            self.imageEmbedded(data);\n                        });\n                    });\n                    self.panel.find('[data-marklar-placeholder=\"insert-image\"]').replaceWith(button);\n                    self.insertImageButton = button;\n                });\n            }\n            if (self.filepicker.canShowFilepicker(\"link\")) {\n                str.get_string(\"insertlink\", \"editor_marklar2\").done(function(strinsertlink) {\n                    var button = $('<button class=\"btn btn-default\" data-marklar-widget=\"insert-file\" />');\n                    button.text(strinsertlink);\n                    button.click(function(e) {\n                        e.preventDefault();\n                        self.filepicker.showFilepicker(\"link\", function(data) {\n                            self.insertLink(data);\n                        });\n                    });\n                    self.panel.find('[data-marklar-placeholder=\"insert-file\"]').replaceWith(button);\n                    self.insertFileButton = button;\n                });\n            }\n        });\n    };\n\n    /**\n     * Initialize the context preview support.\n     *\n     * @return {boolean}\n     */\n    // MarklarEditor.prototype.initPreview = function() {\n    //     var self = this;\n\n    //     // Check there is the format selector available.\n    //     if (!self.formatSelector) {\n    //         return false;\n    //     }\n\n    //     self.previewBody = $('<div class=\"marklar-preview\" />')\n    //         .hide();\n    //     self.panel.before(self.previewBody);\n    //     return str.get_strings([\n    //             {key: 'previewon', component: 'editor_marklar2'},\n    //             {key: 'previewoff', component: 'editor_marklar2'}\n    //     ]).then(function(strings) {\n    //         self.previewButtonOn = $('<button class=\"btn btn-default\" data-marklar-widget=\"preview-on\" />')\n    //             .text(strings[0])\n    //             .on('click', self.previewOn.bind(self));\n    //         self.previewButtonOff = $('<button class=\"btn btn-default\" data-marklar-widget=\"preview-off\" >')\n    //             .text(strings[1])\n    //             .on('click', self.previewOff.bind(self))\n    //             .hide();\n    //         var buttonPreview = $('<div class=\"marklar-preview-controls\" />')\n    //             .append(self.previewButtonOn)\n    //             .append(self.previewButtonOff);\n    //         self.panel.find('[data-marklar-placeholder=\"preview\"]').replaceWith(buttonPreview);\n    //         return true;\n    //     });\n    // };\n\n    /**\n     * Toggle preview mode on.\n     *\n     * @param {Event} e\n     * @return {boolean}\n     */\n    // MarklarEditor.prototype.previewOn = function(e) {\n    //     var self = this;\n    //     e.preventDefault();\n\n    //     return str.get_string('previewloading', 'editor_marklar2').then(function(strpreviewloading) {\n    //         self.previewButtonOn.hide();\n    //         self.previewButtonOff.show();\n    //         self.editpanel.hide();\n\n    //         self.previewBody.html('<div class=\"marklar-preview-loading\">' + strpreviewloading + '</div>');\n    //         self.previewBody.height(self.textarea.height());\n\n    //         self.textarea.hide();\n    //         self.previewBody.show();\n    //         self.previewLoad();\n\n    //         return true;\n    //     });\n    // };\n\n    /**\n     * Toggle preview mode off.\n     *\n     * @param {Event} e\n     */\n    // MarklarEditor.prototype.previewOff = function(e) {\n    //     var self = this;\n    //     e.preventDefault();\n\n    //     self.previewButtonOff.hide();\n    //     self.previewButtonOn.show();\n    //     self.editpanel.show();\n\n    //     self.previewBody.hide();\n    //     self.previewBody.html('');\n    //     self.textarea.show();\n    // };\n\n    /**\n     * Load and display the text preview.\n     *\n     * @return {boolean}\n     */\n    // MarklarEditor.prototype.previewLoad = function() {\n    //     var self = this;\n    //     var args = {\n    //         text: self.textarea.val(),\n    //         format: self.formatSelector.val(),\n    //         contextid: self.initparams.contextid\n    //     };\n\n    //     return ajax.call([{\n    //         methodname: 'editor_marklar2_get_preview',\n    //         args: args\n    //     }])[0].fail(function(err) {\n    //         self.previewBody.html('<div class=\"alert alert-error\"><b>Error:</b> ' + err.message + '</div>');\n    //         log.error(err);\n    //         return false;\n\n    //     }).then(function(response) {\n    //         self.previewBody.html(response.html);\n    //         event.notifyFilterContentUpdated(self.previewBody);\n    //         return true;\n    //     });\n    // };\n\n    /**\n     * This is called once the use picks an image via filepicker.\n     *\n     * @param {Object} data\n     */\n    MarklarEditor.prototype.imageEmbedded = function(data) {\n        if (\"url\" in data) {\n            this.insertText(\"<img alt=\\\"\\\" class=\\\"img-responsive\\\" src=\\\"\" + data.url + \"\\\"/>\");\n        }\n    };\n\n    /**\n     * This is called once the user picks a file via filepicker.\n     *\n     * @param {Object} data\n     */\n    MarklarEditor.prototype.insertLink = function(data) {\n        if (\"url\" in data) {\n            var texttoshow;\n            if (\"file\" in data && data.file) {\n                texttoshow = data.file.replace(/(\\[|\\])/g, \"_\");\n            } else {\n                texttoshow = \"texttoshow\";\n            }\n            this.insertText(\"[\" + texttoshow + \"](\" + data.url + \")\");\n        }\n    };\n\n    /**\n     * Inserts the given text into the editor.\n     *\n     * @param {String} inserttext\n     */\n    MarklarEditor.prototype.insertText = function(inserttext) {\n        var areatext = this.textarea.val();\n        var selectionStart = this.textarea.prop('selectionStart');\n        var selectionEnd = this.textarea.prop('selectionEnd');\n        this.textarea.val(areatext.substring(0, selectionStart) + inserttext + areatext.substring(selectionEnd));\n    };\n\n    /**\n     * Initialize the syntax help panel.\n     *\n     * @return {boolean}\n     */\n    MarklarEditor.prototype.initSyntaxHelp = function() {\n        var self = this;\n\n        // Check there is the format selector available.\n        // if (!self.formatSelector) {\n        //     return false;\n        // }\n\n        self.syntaxBody = $('<div class=\"marklar-syntax-help\" />')\n            .hide();\n        self.editpanel.append(self.syntaxBody);\n        str.get_strings([\n                {key: 'syntaxon', component: 'editor_marklar2'},\n                {key: 'syntaxoff', component: 'editor_marklar2'},\n        ]).then(function(strings) {\n            self.syntaxButtonOn = $('<button class=\"btn btn-link\" data-marklar-widget=\"syntax-on\" />')\n                .text(strings[0])\n                .on('click', self.syntaxOn.bind(self));\n            self.syntaxButtonOff = $('<button class=\"btn btn-link\" data-marklar-widget=\"syntax-off\" />')\n                .text(strings[1])\n                .on('click', self.syntaxOff.bind(self))\n                .hide();\n            var buttonSyntax = $('<div class=\"marklar-syntax-controls\" />')\n                .append(self.syntaxButtonOn)\n                .append(self.syntaxButtonOff);\n            self.panel.find('[data-marklar-placeholder=\"syntax\"]').replaceWith(buttonSyntax);\n            return true;\n        }).catch(function(err) {\n            log.error(err);\n            return false;\n        });\n\n        // If the syntax help is expanded and the format is changed, update the\n        // syntax help to describe the new format.\n        if (self.formatSelector) {\n            self.formatSelector.on('change', function() {\n                if (self.syntaxBody.is(':visible')) {\n                    self.syntaxButtonOn.click();\n                }\n            });\n        }\n\n        return true;\n    };\n\n    /**\n     * Initialize the image paster module.\n     */\n    MarklarEditor.prototype.initImagePaster = function() {\n        var self = this;\n\n        if (!self.initparams.filepickeroptions.image) {\n            return;\n        }\n\n        ImagePaster.init(self.textarea, self.initparams.filepickeroptions.image, self.imageEmbedded.bind(this));\n    };\n\n    /**\n     * Toggle syntax help on.\n     *\n     * @param {Event} e\n     * @return {boolean}\n     */\n    MarklarEditor.prototype.syntaxOn = function(e) {\n        var self = this;\n        e.preventDefault();\n\n        return str.get_string('syntaxloading', 'editor_marklar2').then(function(strsyntaxloading) {\n            self.syntaxButtonOn.hide();\n            self.syntaxButtonOff.show();\n            self.syntaxBody.html('<div class=\"marklar-syntax-loading\">' + strsyntaxloading + '</div>');\n            self.syntaxBody.show();\n            self.syntaxLoad();\n            return true;\n        });\n    };\n\n    /**\n     * Toggle syntax help off.\n     *\n     * @param {Event} e\n     */\n    MarklarEditor.prototype.syntaxOff = function(e) {\n        var self = this;\n        e.preventDefault();\n\n        self.syntaxButtonOff.hide();\n        self.syntaxButtonOn.show();\n        self.syntaxBody.hide();\n        self.syntaxBody.html('');\n    };\n\n    /**\n     * Load and display the text syntax.\n     *\n     * @return {Deferred}\n     */\n    MarklarEditor.prototype.syntaxLoad = function() {\n        var self = this;\n\n        return str.get_string('syntax-format' + self.formatSelector.val(), 'editor_marklar2').then(function(strsyntax) {\n            self.syntaxBody.html(strsyntax);\n            return;\n        });\n    };\n\n    return /** @alias module:editor_marklar2 */ {\n        init: function(params) {\n            var textarea;\n\n            if (\"elementid\" in params) {\n                textarea = $(document.getElementById(params.elementid));\n            } else {\n                throw new Error(\"editor_markla2: Invalid editor init parameter - missing elementid\");\n            }\n\n            if (textarea.length) {\n                return new MarklarEditor(textarea, params);\n            } else {\n                throw new Error(\"Unable to find textarea element\", params.elementid);\n            }\n        }\n    };\n});\n"],"names":["define","$","Y","str","log","ajax","event","filepicker","ImagePaster","MarklarEditor","textarea","initparams","M","editor_marklar2","fpoptions","elementid","filepickeroptions","initTextArea","initPanel","initFilesEmbedding","initSyntaxHelp","initImagePaster","prototype","this","addClass","css","wrap","panel","insertAfter","editpanel","appendTo","append","self","use","init","canShowFilepicker","get_string","done","strinsertimage","button","text","click","e","preventDefault","showFilepicker","data","imageEmbedded","find","replaceWith","insertImageButton","strinsertlink","insertLink","insertFileButton","error","insertText","url","texttoshow","file","replace","inserttext","areatext","val","selectionStart","prop","selectionEnd","substring","syntaxBody","hide","get_strings","key","component","then","strings","syntaxButtonOn","on","syntaxOn","bind","syntaxButtonOff","syntaxOff","buttonSyntax","catch","err","formatSelector","is","image","strsyntaxloading","show","html","syntaxLoad","strsyntax","params","Error","document","getElementById","length"],"mappings":"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"}